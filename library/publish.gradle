//apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
//
//version '1.0.0'
//group 'com.yxyhail'
//
//
//def pomConfig = {
//    licenses {
//        license {
//            name "The Apache Software License, Version 2.0"
//            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
//            distribution "repo"
//        }
//    }
//    developers {
//        developer {
//            id "developer-id"
//            name "developer-name"
//            email "dev@d.com"
//        }
//    }
//
////    scm {
////        url "https://github.com/yourgithubaccount/example"
////    }
//}
//
//
//publishing {
//    publications {
//        Production(MavenPublication) {
//            artifact("$buildDir/outputs/aar/library-release.aar")
////            artifact artifacts
////            artifact javadocJar
////            artifact sourcesJar
//            groupId this.group
//            artifactId 'logger'
//            version this.version
//
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.implementation.allDependencies.each {
//                    // Ensure dependencies such as fileTree are not included in the pom.
//                    if (it.name != 'unspecified') {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
//            }
//        }
//    }
//}
//
//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}
//
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
//
//bintray {
//    user = project.hasProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')
//    publications = ['Production']
//    configurations = ['archives']
//    override = true
//    pkg {
//        repo = 'library'
//        name = 'logger'
//        description = "A simple logger"
//        publish = true
//        userOrg = 'yxyhail'
//        publicDownloadNumbers = true
//        licenses = ['Apache-2.0']
//        vcsUrl = 'https://github.com/yxyhail/logger.git'
//        dryRun = true
//        version {
//            name = this.version
//            desc = "Logger ${this.version}"
//            released = new Date()
//            vcsTag = this.version
//        }
//    }
//}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}



apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id project.hasProperty('developerId')
                        name project.hasProperty('developerName')
                        email project.hasProperty('developerEmail')
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}